#!/usr/bin/env python3

import sys
import os
import subprocess
import re
import json
from glob import glob

ISIZE = 64
HOME = os.getenv("HOME")

def load_icons():
    icons = {} # {name: {size: [files]}}
    alt   = {} # {altname: name}
    thm = os.popen("gsettings get org.gnome.desktop.interface icon-theme") \
            .read().strip()[1:-1]

    places = [
        f"{HOME}/.icons/{thm}",
        f"{HOME}/.local/share/icons",
        f"/usr/share/icons/{thm}"]
    if thm != "Adwaita":
        places.append("/usr/share/icons/Adwaita")
    places.append("/usr/share/icons/hicolor")
    places.append("/usr/share/app-info/icons")
    places.append("/usr/share/pixmaps")

    for d in places:
        if not os.path.isdir(d):
            continue
        for f in glob(f"{d}/**", recursive=True):
            if not os.path.isfile(f):
                continue
            if "symbolic" in f:
                continue

            name = os.path.basename(f)
            name = name[0:name.rfind(".")]
            try:
                size = int(re.match(".+\/(\d+)x\d+\/.+", f)[1])
            except:
                size = 0

            if name not in icons:
                icons[name] = {}
                # sometimes, the icon name is appname_iconname
                if "_" in name:
                    altname = name[name.find("_") + 1:]
                    alt[altname] = name

            if size not in icons[name]:
                icons[name][size] = []
            icons[name][size].append(f)

    for a in alt:
        if a not in icons:
            icons[a] = alt[a]

    return icons

def load_icon(icons, name, size=ISIZE):
    if name not in icons:
        return None
    if type(icons[name]) == str:
        name = icons[name]
    if size not in icons[name]:
        size = max(icons[name].keys())
    return icons[name][size][0]

def readdesktops(src=None):
    if src is None:
        src = ["/usr/share/applications",
               f"{HOME}/.local/share/applications"]
    icons = load_icons()
    for desk_dir in src:
        for fname in os.listdir(desk_dir):
            if not fname.endswith(".desktop"):
                continue

            with open(f"{desk_dir}/{fname}", "r") as f:
                name, icon, nodisp = None, None, None
                for line in f.readlines():
                    pair = [i.strip() for i in line.split("=")]
                    if name is None and pair[0] == "Name":
                        name = pair[1].strip()
                    elif icon is None and pair[0] == "Icon":
                        icon = pair[1].strip()
                    elif nodisp is None and pair[0] == "NoDisplay":
                        nodisp = pair[1].strip() == "true"
                    elif nodisp is None and pair[0] == "OnlyShowIn":
                        nodisp = True # ignore all apps using that

                if nodisp:
                    continue

                if icon is None:
                    iconf = ""
                elif icon[0] == '/' and os.path.exists(icon):
                    iconf = icon
                else:
                    iconf = load_icon(icons, icon)

            yield name, f"--icon={iconf} --value={desk_dir}/{fname} {name}\n"

def run(src=None, args=[]):
    p = subprocess.Popen(["dmenu", "-i",
                          "-z", "700",
                          "-L", "center",
                          "-l", "5", "-c", "4",
                          "-isize", str(ISIZE),
                          ] + args,
                         stdin=subprocess.PIPE,
                         stdout=subprocess.PIPE,
                         universal_newlines=True)

    for name, line in sorted(list(readdesktops(src))):
        p.stdin.write(line)
    p.stdin.close()

    res = p.stdout.read().strip()
    if res:
        print(f"Running {res}")
        with open(res, "r") as f:
            for line in f.readlines():
                m = re.match("^Exec=(.+)", line)
                if m:
                    cmd = re.sub("\s*%.\s*", "", m[1])
                    print(cmd)
                    os.popen(cmd)
                    break

    return p.wait()

def main():
    src = None
    if len(sys.argv) > 1:
        args = sys.argv[1:]

        if args[0] == "icons":
            icons = load_icons()
            for name in icons:
                f = load_icon(icons, name)
                print(f"--icon={f} --value={f} {name}")
        else:
            if args[0] == "--src":
                src = args[1].split(":")
                args = args[2:]
            return run(src, args)
    else:
        return run(src)
    return 0

if __name__ == "__main__":
    exit(main())
